import { SecondStreamType } from "../types/record";
import { clearHlsDirectory, startHls } from "./recordStream";

const retryAttempts = new Map<number, number>();
const MAX_RETRIES = 20; // 20 –ø–æ–ø—ã—Ç–æ–∫ = 10 –º–∏–Ω—É—Ç
export const SECOND__STREAMS:SecondStreamType[] = [
  {stream: "/dev/console_big", key: "first"},
  // {stream: "/dev/console_small", key: "second"},
  {stream: "rtsp://admin:admin@192.168.12.248:554/", key: "fiveth"},
  {stream: "rtsp://admin:admin@192.168.12.247:554/", key: "sixth"},
];

export async function startSecondStreams() {
  clearHlsDirectory();
  SECOND__STREAMS.forEach(async (stream, index) => {
    const initializeStream = async () => {
      const currentRetries = retryAttempts.get(index) || 0;
      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
      if (currentRetries >= MAX_RETRIES) {
        console.error(
          `‚ùå Stream ${stream} exceeded max retries (${MAX_RETRIES}). Giving up.`
        );
        return;
      }

      try {
        startHls(stream);
        console.log(
          `‚úÖ Stream ${index} (device: ${stream}) initialized successfully`
        );
        retryAttempts.set(index, 0); // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      } catch (error: any) {
        console.error(
          `‚ùå Stream ${index} (device: ${stream}) failed:`,
          error.message
        );
        retryAttempts.set(index, currentRetries + 1); // ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

        // üîÑ Retry —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        console.log(`üîÑ Stream ${index} will retry in 30 seconds...`);
        setTimeout(() => {
          initializeStream();
        }, 30000);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Å—Ç—Ä–∏–º–∞–º–∏
    setTimeout(() => initializeStream(), index * 1000); // 0—Å, 1—Å, 2—Å, 3—Å
  });
}
